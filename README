vim: set ft=help foldmethod=marker
文件树架构
1.首先vim执行plugin 中的所有脚本，主要是定义一些全局变量，和函数。
2.在到ftplugin中执行匹配文件类型的脚本，
3.在indent/中设置相关的缩进
4.执行.vimrc

最佳实践
---------------------------------
* 把每天都要重复的按键映射为key
* 把CapsLock 和esc交换
    ubuntu 自带的改建软件就可以改， vim无法表示CapsLock
    
* 在指定位置插入字符
  e.g. sdsadb sdsooo 变为 sds_adb sds_ooo



察看按键的表示 h keycode
1 read 
2 autocmd 自动命令
3 source 读取一个文件中的Ex命令
4 autocmd-events 
在一个文件中设定vim 设置

-------------------------------
   vim: set opt1=val1:opt2=val2[:....]

"specal words 
<BS> 删除光标前的字符
<Del> 删除光标后的字符

"自动补全
words
set complete+=k           " scan the files given with the 'dictionary' option
C-P: previous-match 
C-N: next-match 
C-X C-F match in file-name

complet 定制补全策略

EE 把Ex命令输出到文本中
insert 模式下C-r： 可以输出最近一次的Ex命令

EE 
  vtx 从光标位置开始选中直到字母x
  dtx 
  

EE C-r =
0
1
2
3
4
kkk

EE :reg 输出寄存器内容
EE :marks 输出标记内容

VIMScript Programming 
=============================================
vimscript 是一种动态强类型脚本语言
vimscript 中所有的语句都一\n 结尾
如果要使用多行用使用反斜杠
通过使用| 可以把多个exp放到一行中
变量 {{{
------------------------------------
  + 变量赋值 
       使用 *let* 关键字来进行变量赋值 
         let name = value
     想要察看当前定义的所有变量 使用 :let 命令

  + 删除变量 
       使用 *unlet* 关键字来删除变量
            unlet var
       使用 unlet! var 删除变量时如果变量不存在不会报错
    
        e.g. 删除所有的s:变量 >
	for k in keys(s:)
	    unlet s:[k]
	endfor
> 
  + 变量类型 
     * scalar:
     * list: 使用方括号包围的有序集合  index 从0开始
     *    e.g. let li = [1,2,3,4]
     * dictionary : 使用花括号包围的无须集合 k:v 
     *    e.g. let di = {'name':'li', 'home':321}
     一个变量的类型是第一个赋值时值的类型，变量类型一旦分配后
     不会改变


  + 变量作用域
     vimscript 的变量作用域（可见范围）和一般的编程语言不同，它是根据
     编辑器对象来设定的。 
      默认情况下，变量如果在函数内部定义则在函数内部可见，
        如果在函数外部定义则是全局变量
        通过在变量名的开头添加前缀 显式定义不同作用域的变量
     + 全局可见             |g|:var
     + 变量所在的脚本可见   |s|:var 
            s: 变量不会随着script的执行完成而free， 下次在执行script
            是s:变量还是上回的值
     + vim预定义变量        |v|:var
     + 变量在当前函数中可见 |l|:var
     + 变量是当前函数的一个参数 |a|:var 常用来在函数中取得函数的参数

  + 伪变量（特殊变量）
      * &name 获得vim选项值 e.g. let xx=&path
      * @name 获得vim寄存器中的值
      * $name 环境变量 e.g. let spath=$PATH

     
  + string 变量
    string 拼接 使用 .
      e.g. let s:var = "hello " . "worlds " . s:str
    *empty(str)* string 判空  !str
    *strtrans(str)* 把string中的不可打印字符转行成可打印字符
    *strlen* (str, beign, [end]) begin index 从0 开始 
    
}}}


condition {{{
  + == 
     VIMScript 中比较始终执行数字比较， 除非两个对象都是 string 
       如果 一个是string 一个是num 那么string将会被转化为数字在比较
}}}

函数 {{{
-------------------------------------
|expand|(x,y) 得到指定的string
     e.g. 到的当前文件的名字 expand('%')
     e.g. 到的当前文件的目录 expand('%:h)
     e.g. 到的当前文件的扩展名 expand('%:e)



|executable|('name') 坚持name是否是可执行文件
}}}

|getline|/1-2 得到指定的行内容
   得到当前行 getlien(".")
   得到1-3行 getlien(1,3) -> list() 
     返回一个list，每个元素是一行内容

|setline|/2(len, text) 设置指定行的内容
   当text为list的适合会把每个elemt 当作一行
   设置当前行内容为 hellC
      setlien(".", 'hello'
call setline('.', getline('.')[:-2])
 [:-2] 的意思是 得到getlien返回的string 的子串 
     返回从开始到倒数第二个（包含）的子串 see <h [:]>
     负数表示从end开始计数 [begin:end]
        
  e.g. 返回234 '12345'[1:-2]

  
|col|('.') 得到当前光标的为位置
   

执行 vim脚步 
:source filename

自定义命令
--------------------------------------
使用 command 来定义一个命令
 e.g. > >
	command LinuxKernelMode call KernelMode()
	function KernelMode()
	  let l:kernel_release = system('uname -r')
	  echo l:kernel_release
	endfunction
<

" set cmd
set
setlocal setl
