-module($MODULENAME).
-behaviour(gen_event).


%% gen_event callbacks
-export([init/1, handle_event/2, handle_call/2, handle_info/2, terminate/2, code_change/3 ]).



%% Module Interface
%% ----------------------------
-record(state, {}).

%-export([start_link/0,
%         add_handler/2
%         ]).

%%----------------------------------------------------------------
%% @doc Creates an event manager
-spec start_link() -> {ok, Pid} | {error, Error}.
%% @end
%start_link() ->
    %gen_event:start_link({local, ?MODULE}).

%%--------------------------------------------------------------------
%% @doc Adds an event handler
%% @spec add_handler(Handler, Args) -> ok | {'EXIT', Reason} | term()
%% @end
%add_handler(Handler, Args) ->
    %gen_event:add_handler(?MODULE, Handler, Args).


%%--------------------------------------------------------------------
%% @private
%% @doc init handler Module 
%%         gen_event:add_handler(Name, Module, []) call this Module:init
%% @spec init(Args) -> {ok, State} | {ok, State, hibernate} | {error, Reason}
%% @end
init([]) ->
    {ok, #state{}}.

%%--------------------------------------------------------------------
%% @private
%% @spec terminate(Reason, State) -> void()
%% @end
terminate(_Reason, _State) ->
    ok.

%%--------------------------------------------------------------------
%% @private
%% @doc handle event from gen_event:notify/2 or gen_event:sync_notify/2 
%%
%% @spec handle_event(Event, State) ->
%%                          {ok, NewState} | 
%%                          {ok, NewState, hibernate} |
%%                          {swap_handler, Args1, State1, Mod2, Args2} |
%%                          remove_handler
%% @end
handle_event(_Event, State) ->
    {ok, State}.

%%--------------------------------------------------------------------
%% @private
%% @doc
%% Whenever an event manager receives a request sent using
%% gen_event:call/3,4, this function is called for the specified
%% event handler to handle the request.
%%
%% @spec handle_call(Request, State) ->
%%                   {ok, Reply, NewState} |
%%                   {ok, Reply, NewState, hibernate}
%%                   {remove_handler, Reply}
%%                   {swap_handler, Reply, Args1, NewState, Mod2, Args2} |
%% @end
handle_call(_Request, State) ->
    Reply = ok,
    {ok, Reply, State}.

%%--------------------------------------------------------------------
%% @private
%% @doc
%% @spec handle_info(Info, State) ->
%%                         {ok, NewState} |
%%                         {o, NewState, hibernate}
%%                         {swap_handler, Args1, State1, Mod2, Args2} |
%%                         remove_handler
%% @end
handle_info(_Info, State) ->
    {ok, State}.

%%--------------------------------------------------------------------
%% @private
%% @doc Convert process state when code is changed
%% @spec code_change(OldVsn, State, Extra) -> {ok, NewState}
%% @end
code_change(_OldVsn, State, _Extra) ->
    {ok, State}.



%%%===================================================================
%%% Internal functions
